#!/usr/bin/env python 
import urllib2
from BeautifulSoup import BeautifulSoup
from subprocess import call
import pystache as pst
import sys, getopt, os, glob,shutil,ast
from mgmic_description import qc_desc,s16_desc,assemble_desc,fgs_desc

host_name = "http://192.168.99.100"

def data_collect(argv):
    mgmic_base_out="/data/static/mgmic_tasks/%s/%s"
    base_url = "%s/mgmic_tasks/%s/" %  (host_name,"%s")
    report_url = "%s/mgmic_tasks/%s/%s" %  (host_name,"%s","%s")
    url_before_template="%s/mgmic_tasks/%s/%s_fastqc.html" %  (host_name,"%s","%s")
    url_after_template="%s/mgmic_tasks/%s/%s.trimmed.paired.fq.gz_fastqc.html" %  (host_name,"%s","%s")
    forward_filename =''
    reverse_filename =''
    task_id=''
    workflow = {"qc":"on","s16":"on","assemble":"on","func_gene":"on"}
    try:
	opts, args = getopt.getopt(argv,"hf:r:t:w:")
    except getopt.GetoptError:
	print 'make_report.py -f <foward_read> -r <reverse_read> -t <task_id> -w <workflow>'
    for opt, arg in opts:
        if opt == '-h':
            print "make_report.py -f <foward_read> -r <reverse_read> -t <task_id> -w <workflow>"
            sys.exit()
        elif opt in ("-f",):
	    filename, file_extension = os.path.splitext(arg)
	    if "gz" in file_extension:
		forward_filename= filename.replace(".gz","").split('/')[-1]
	    else: 
	    	forward_filename =arg.split('/')[-1]
        elif opt in ("-r",):
 	    filename, file_extension = os.path.splitext(arg)
	    if "gz" in file_extension:
		reverse_filename = filename.replace(".gz","").split('/')[-1]
	    else:
		reverse_filename = arg.split('/')[-1]
        elif opt in ("-t",):
            task_id=arg
	elif opt in ("-w",):
            workflow=arg
		
    base_url = base_url % (task_id)
    logfile = open(mgmic_base_out % (task_id,'report.txt'),'w')
    logfile.write( "%s\n%s\n%s\n%s\n" % (forward_filename,reverse_filename,task_id,workflow))
    md = "#MGMIC Report\n"
    try: 
        qc_md = quality_control(mgmic_base_out,task_id,forward_filename,reverse_filename,logfile,workflow)
    except Exception as inst:
        qc_md = "###Quality Control\n\nERROR: %s\n\n" % str(inst)
    md = "%s%s\n" % (md,qc_md)
    if workflow["s16"]=="on":
        try:
            s16_md = s16(base_url)
        except Exception as inst:
            s16_md = "###16S Classification\n\nERROR: %s\n\n" % str(inst)
        md = "%s%s\n" % (md,s16_md)
    if workflow["assemble"]=="on":
        try:
            assemble_md = assemble(mgmic_base_out,task_id,base_url)
        except Exception as inst:
            assemble_md = "###Assemble\n\nERROR: %s\n\n" % str(inst)
        md = "%s%s\n" % (md,assemble_md)
    if workflow["func_gene"]=="on":
        try:
            fgen_md = func_gen(mgmic_base_out,task_id)
        except Exception as inst:
            fgen_md = "###Functional Gene Search\n\nERROR: %s\n\n" % str(inst)
        md = "%s%s\n" % (md,fgen_md)
    
    fout= open(mgmic_base_out % (task_id,'report.md'),'w')
    fout.write(md)
    fout.close()
    shutil.copyfile('/usr/src/app/bin/buttondown.css',mgmic_base_out % (task_id,'buttondown.css'))
    call(["pandoc", mgmic_base_out % (task_id,'report.md'),"-s", "-c",'buttondown.css' , "-o", mgmic_base_out % (task_id,'report.html')])

def s16(base_url):
    data = {'s16_desc':s16_desc,'s16_l1':"%s%s" % (base_url, '16s_classification/community_pie_chart_L1.png'),
            's16_l3':"%s%s" % (base_url, '16s_classification/community_pie_chart_L3.png'),
            'qiime-url':"%s%s" % (base_url,'16s_classification/temp/mg_taxplots/taxa_summary_plots/pie_charts.html'),
            'ssu_hits': "%s%s" % (base_url,'16s_classification/ssu_hits_corrected.fasta')
            }
    template= open('/usr/src/app/templates/s16.tmpl','r').read()
    return pst.render(template,data)

def func_gen(mgmic_base_out,task_id):
    gene_dir = mgmic_base_out % (task_id,'/functional_gene')
    gene_search = [ name for name in os.listdir(gene_dir) if os.path.isdir(os.path.join(gene_dir, name)) ]

    template= open('/usr/src/app/templates/ind_gene.tmpl','r').read()
    gene_markdown=''
    idx=0
    for name in gene_search:
        cur_image = os.path.join(gene_dir,name,"%s%s" % (name,".udb.bargraph.png"))
        if os.path.isfile(cur_image):
            img_url = cur_image.replace('/data/static',host_name)
            temp = pst.render(template,{'name':name,'alt_text':name,'url':img_url})
            if idx % 2 == 0 and idx !=0:
                gene_markdown = gene_markdown + temp + "  \n"
            else:
                gene_markdown = gene_markdown + temp
            idx+=1
    data ={'fgs_desc':fgs_desc,'gene_markdown':gene_markdown}
    template= open('/usr/src/app/templates/func_gene.tmpl','r').read()
    return pst.render(template,data)

def assemble(mgmic_base_out,task_id,base_url):
    try:
        with open( mgmic_base_out % (task_id,'/assemble_ray/stats.txt'),'r') as f:
            assemble_statistics= f.read()
    except:
        assemble_statistics="Error stats file not found."
    template= open('/usr/src/app/templates/assemble.tmpl','r').read()
    data ={'assemble_desc':assemble_desc,'assemble_fasta': "%s%s" % (base_url,'assemble_ray/Contigs.fasta'),
               'assemble_statistics': assemble_statistics,
          }
    return pst.render(template,data)


def quality_control(mgmic_base_out,task_id,forward_filename,reverse_filename,logfile,workflow):
    fwd=[]
    rev = []
    for file in glob.glob(mgmic_base_out % (task_id,"*.html")):
        if os.path.splitext(forward_filename)[0] in file:
            fwd.append((file,len(file)))
        if os.path.splitext(reverse_filename)[0] in file:
            rev.append((file,len(file)))
    if workflow["qc"]=="on":
        #set files in order
        if fwd[0][1] > fwd[1][1]:
            forg = fwd[1][0].replace("/data/static",host_name)
            fqc_url = fwd[0][0].replace("/data/static",host_name)
        else:
            forg = fwd[0][0].replace("/data/static",host_name)
            fqc_url = fwd[1][0].replace("/data/static",host_name)
        if rev[0][1] > rev[1][1]:
            rorg = rev[1][0].replace("/data/static",host_name)
            rqc_url = rev[0][0].replace("/data/static",host_name)
        else:
            rorg = rev[0][0].replace("/data/static",host_name)
            rqc_url = rev[1][0].replace("/data/static",host_name)
        #Load pages
        fpage = BeautifulSoup(urllib2.urlopen(forg))
        rpage = BeautifulSoup(urllib2.urlopen(rorg))
        qcfpage = BeautifulSoup(urllib2.urlopen(fqc_url))
        qcrpage = BeautifulSoup(urllib2.urlopen(rqc_url))
    else:
        forg = fwd[0][0].replace("/data/static",host_name)
        rorg = rev[0][0].replace("/data/static",host_name)
        #load Pages
        fpage = BeautifulSoup(urllib2.urlopen(forg))
        rpage = BeautifulSoup(urllib2.urlopen(rorg))
    logfile.write("%s\n%s\n" % (forg,rorg))
    temp=[]
    temp_src=[]
    if workflow["qc"]=="on":
        pages =[fpage,rpage,qcfpage,qcrpage]
        template= open('/usr/src/app/templates/qc_on.tmpl','r').read()
    else:
        pages = [fpage,rpage]
        template= open('/usr/src/app/templates/qc_off.tmpl','r').read()
    for page in pages:
        temp.append(page.findAll('img')[15])
        temp.append(page.findAll('img')[21])
        temp_src.append(page.findAll('img')[15]['src'])
        temp_src.append(page.findAll('img')[21]['src'])
    #set data
    if workflow["qc"]=="on":
        data ={'forward_scr1':temp_src[0],"forward_scr2":temp_src[1],"qc_forward_scr1":temp_src[4],"qc_foward_scr2":temp_src[5],
            'reverse_scr1':temp_src[2],"reverse_scr2":temp_src[3],"qc_reverse_scr1":temp_src[6],"qc_reverse_scr2":temp_src[7],
            'qc_desc':qc_desc}
    else:
        data ={'forward_scr1':temp_src[0],"forward_scr2":temp_src[1],'reverse_scr1':temp_src[2],"reverse_scr2":temp_src[3],
                'qc_desc':qc_desc}

    return pst.render(template,data)


if __name__ == '__main__':
    # your code
    data_collect(sys.argv[1:])

